// 1 
// Даны два целых числа x и n, напишите функцию для вычисления x^n
// решение 1 - рекурсивно O(n)

function power(x, n) {
    if (n === 0) return 1;
    return x * power(x, n-1);
}

//решение 2 - улучшить решение 1 до O(lon n)

function power(x, n) {
    if (n === 0) return 1;
    if (n % 2 === 0) {
        let y = power(x, n/2);
        return y * y;
    } else {
        return x * power(x, n-1);
    }
}
//================
//Массив 1 - 100 112 256 349 770
//Массив 2 - 72 86 113 119 265 445 892
//к = 7
//Вывод : 256
//Окончательный отсортированный массив -
//72, 86, 100, 112, 113, 119, 256, 265, 349, 445, 770, 892
//7-й элемент этого массива равен 256.

function findKthElement(arr1, arr2, k) {
    let i = 0, j = 0;
    while (i < arr1.length && j < arr2.length) {
        if (arr1[i] < arr2[j]) {
            if (i + j === k) {
                return arr1[i];
            }
            i++;
        } else {
            if (i + j === k) {
                return arr2[j];
            }
            j++;
        }
    }
    if (i < arr1.length) {
        return arr1[k - j];
    } else {
        return arr2[k - i];
    }
}
//=========================
//Имея отсортированный массив arr[] и число x, напишите функцию, которая подсчитывает вхождения x в arr[]. Ожидаемая временная сложность O(Log n)
//arr[] = {1, 1, 2, 2, 2, 2, 3,} 
//x = 2

function countOccurrences(arr, x) {
    let left = 0, right = arr.length - 1;
    let firstOccurrence = -1, lastOccurrence = -1;
    while (left <= right) {
        let mid = Math.floor((left + right) / 2);
        if (arr[mid] < x) {
            left = mid + 1;
        } else if (arr[mid] > x) {
            right = mid - 1;
        } else {
            firstOccurrence = mid;
            right = mid - 1;
        }
    }
    if (firstOccurrence === -1) {
        return 0;
    }
    left = 0, right = arr.length - 1;
    while (left <= right) {
        let mid = Math.floor((left + right) / 2);
        if (arr[mid] < x) {
            left = mid + 1;
        } else if (arr[mid] > x) {
            right = mid - 1;
        } else {
            lastOccurrence = mid;
            left = mid + 1;
        }
    }
    return lastOccurrence - firstOccurrence + 1;
}

//===============

*/  Найдите пиковый элемент в двумерном массиве
Элемент является пиковым, если он больше или равен своим четырем соседям слева, справа, сверху и снизу. Например, соседями для A[i][j] являются A[i-1][j], A[i+1][j], A[i][j-1] и A[i][j+1 ]. Для угловых элементов отсутствующие соседи считаются отрицательными бесконечными значениями.
10 20 15
21 30 14
 7 16 32
Выход: 30
30 — пиковый элемент, потому что все его
соседи меньше или равны ему.
32 также можно выбрать в качестве пика. */

4 задачу не смог решить
