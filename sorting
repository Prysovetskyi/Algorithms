//1. Даны два целых числа x и n, напишите функцию для вычисления x^n (x в степени n).

//решение 1 - рекурсивно O(n)
function recurs(x, n) {
  if (n === 0) {
    return 1;
  } else if (n === 1) {
    return x;
  } else {
    return x * recurs(x, n-1);
  }
}
console.log(recurs(2, 3)); // выведет 8
console.log(recurs(5, 4)); // выведет 625

//решение 2 - улучшить решение 1 до O(lon n)

function improve(x, n) {
  if (n === 0) {
    return 1;
  } else {
    const link = improve(x, Math.floor(n/2));
    if (n % 2 === 0) {
      return half * half;
    } else {
      return x * link * link;
    }
  }
}

//--------------------------------------------------------------------------
function Element(arr1, arr2, k) {
  let merged = [];
  let i = 0, j = 0;
  
  while (i < arr1.length && j < arr2.length) {
    if (arr1[i] < arr2[j]) {
      merged.push(arr1[i]);
      i++;
    } else {
      merged.push(arr2[j]);
      j++;
    }
    if (merged.length === k) {
      return merged[k-1];
    }
  }
  
  while (i < arr1.length) {
    merged.push(arr1[i]);
    i++;
    if (merged.length === k) {
      return merged[k-1];
    }
  }
  
  while (j < arr2.length) {
    merged.push(arr2[j]);
    j++;
    if (merged.length === k) {
      return merged[k-1];
    }
  }
  
  return -1; // если k выходит за пределы длины объединенного массива
}

// Пример:
let arr1 = [100, 112, 256, 349, 770];
let arr2 = [72, 86, 113, 119, 265, 445, 892];
let k = 7;

let result = Element(arr1, arr2, k);
console.log(result); // 256




     
     
